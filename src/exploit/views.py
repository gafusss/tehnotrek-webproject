from django.shortcuts import render, resolve_url, get_object_or_404, redirect
from django.views.generic import ListView, DetailView, CreateView, UpdateView
from django.contrib.auth.mixins import LoginRequiredMixin
from .models import Post, Like
from .forms import PostForm
from comments.models import Comment
from comments.forms import CommentForm
from django.http import HttpResponseNotAllowed, JsonResponse
from .forms import PostListForm
from django.core.exceptions import ObjectDoesNotExist


class PostIndexList(ListView):
    template_name = 'exploit/index.html'
    model = Post

    def get_queryset(self):
        queryset = Post.objects.all().order_by('-published')[:10]
        return queryset


class PostList(ListView):
    template_name = 'exploit/post_list.html'
    model = Post

    def dispatch(self, request, *args, **kwargs):
        self.form = PostListForm(request.GET)
        self.form.is_valid()
        return super(PostList, self).dispatch(request, *args, **kwargs)

    def get_queryset(self):
        queryset = Post.objects.all()
        if self.form.cleaned_data.get('exploittype'):
            queryset = queryset.filter(exploit_type=self.form.cleaned_data.get('exploittype'))
        if self.form.cleaned_data.get('confirmed_only'):
            queryset = queryset.filter(confirmed=True)
        if self.form.cleaned_data.get('search'):
            queryset = queryset.filter(title__icontains=self.form.cleaned_data['search'])
        if self.form.cleaned_data.get('sort'):
            s = self.form.cleaned_data.get('sort')
            if self.form.cleaned_data.get('reverse'):
                s = '-' + s
            queryset = queryset.order_by(s)
        return queryset

    def get_context_data(self, **kwargs):
        context = super(PostList, self).get_context_data(**kwargs)
        context['form'] = self.form
        return context


class PostView(DetailView):
    template_name = 'exploit/post.html'
    model = Post

    def dispatch(self, request, pk=None, *args, **kwargs):
        pc = None
        if request.GET.get('parent_comment'):
            pc = Comment.objects.all().filter(id=request.GET['parent_comment'], parent_post=pk).first()
        self.parent_comment = pc
        self.likes = Like.objects.all().filter(post=pk, value=True).count()
        self.dislikes = Like.objects.all().filter(post=pk, value=False).count()
        self.rating = self.likes - self.dislikes
        self.user_like = Like.objects.all().filter(post=pk, user=request.user.id).first()
        return super(PostView, self).dispatch(request, *args, **kwargs)

    def get_context_data(self, **kwargs):
        context = super(PostView, self).get_context_data(**kwargs)
        context['parent_comment'] = self.parent_comment
        context['rating'] = self.rating
        context['user_like'] = self.user_like
        return context


class PostCreate(LoginRequiredMixin, CreateView):
    form_class = PostForm
    template_name = 'exploit/new_post.html'

    def form_valid(self, form):
        # Saving valid form
        form.instance.author = self.request.user
        return super(PostCreate, self).form_valid(form)

    def get_success_url(self):
        return resolve_url('exploit:post', pk=self.object.pk)


class PostEdit(UpdateView):
    form_class = PostForm
    template_name = 'exploit/new_post.html'

    def get_success_url(self):
        return resolve_url('exploit:post', pk=self.object.pk)

    def get_queryset(self):
        return Post.objects.filter(author=self.request.user)


class PostComment(LoginRequiredMixin, CreateView):
    http_method_names = ['post']
    # model = Comment
    template_name = 'exploit/empty.html'
    # fields = ('text', 'parent_post', 'parent_comment')
    form_class = CommentForm

    def form_valid(self, form):
        # Saving valid form
        form.instance.author = self.request.user
        return super(PostComment, self).form_valid(form)

    def form_invalid(self, form):
        return redirect('exploit:post_list')

    def get_success_url(self):
        return '{}#article-comment-{}'.format(resolve_url('exploit:post', pk=self.object.parent_post.pk),
                                              self.object.id)


class PostCommentAjax(LoginRequiredMixin, CreateView):
    http_method_names = ['post']
    # model = Comment
    template_name = 'exploit/empty.html'
    # fields = ('text', 'parent_post', 'parent_comment')
    form_class = CommentForm

    def dispatch(self, request, *args, **kwargs):
        self.request = request
        return super(PostCommentAjax, self).dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        # Saving valid form
        form.instance.author = self.request.user
        response = super(PostCommentAjax, self).form_valid(form)
        return JsonResponse({'id': form.instance.id, 'data': render(self.request, 'exploit/comments.html',
                                                                    {'object': form.instance.parent_post}).content})

    def form_invalid(self, form):
        return redirect('exploit:post_list')

    def get_success_url(self):
        return '{}#article-comment-{}'.format(resolve_url('exploit:post', pk=self.object.parent_post.pk),
                                              self.object.id)


class PostRate(LoginRequiredMixin, CreateView):
    http_method_names = ['post']
    model = Like
    template_name = 'exploit/empty.html'
    fields = ()

    def dispatch(self, request, pk=None, value=None, *args, **kwargs):
        self.user = request.user
        self.post_instance = Post.objects.get(id=pk)
        self.value = value
        self.like = Like.objects.filter(user=self.user, post=self.post_instance).first()
        return super(PostRate, self).dispatch(request, *args, **kwargs)

    def form_valid(self, form):
        # Saving valid form
        if self.like:
            form.instance.id = self.like.id
        form.instance.user = self.user
        form.instance.post = self.post_instance
        form.instance.value = self.value
        return super(PostRate, self).form_valid(form)

    def form_invalid(self, form):
        return redirect('exploit:post_list')

    def get_success_url(self):
        return resolve_url('exploit:post', pk=self.object.post.pk)


# class PostRateAjax(LoginRequiredMixin, CreateView):
#    http_method_names = ['post']
#    model = Like
#    template_name = 'exploit/empty.html'
#    fields = ()

def PostRateAjax(request, pk=None, value=None):
    if request.method != 'POST':
        return HttpResponseNotAllowed('POST', '405: Method not allowed')
    try:
        like = Like.objects.get(post=pk, user=request.user.id)
        like.value = value
        like.save()
    except ObjectDoesNotExist:
        like = Like(post=Post.objects.get(pk=pk), user=request.user, value=value)
        like.save()
    likes = Like.objects.all().filter(post=pk, value=True).count()
    dislikes = Like.objects.all().filter(post=pk, value=False).count()
    rating = likes - dislikes
    return render(request, 'exploit/rating.html',
                  {'object': Post.objects.get(pk=pk), 'user': request.user, 'rating': rating, 'user_like': like})
