# coding=utf-8
from __future__ import unicode_literals
import uuid

from django.core.exceptions import ValidationError
from django.db import models
from django.conf import settings
from like.models import LikeMixin


def post_upload_path(instance, filename):
    return 'uploads/{0}_{1}'.format(str(instance.uuid), filename)


# Create your models here.
class ExploitType(models.Model):
    def __unicode__(self):
        return '%20s' % self.title

    title = models.CharField(max_length=255, verbose_name=u'Тип эксплоита')

    class Meta:
        verbose_name = u'Тип эксплоита'
        verbose_name_plural = u'Типы эксплоитов'


class Tag(models.Model):
    def __unicode__(self):
        return '%20s' % self.title

    title = models.CharField(max_length=255, verbose_name=u'Тэг', unique=True)

    def clean(self):
        if all(x.isalnum() or x.isspace() for x in self.title):
            return self
        raise ValidationError(u'Только буквы, цифры и пробелы')

    class Meta:
        verbose_name = u'Тэг'
        verbose_name_plural = u'Тэги'


class Like(models.Model):
    def __unicode__(self):
        return "{} {}".format(self.user.username, self.post.title)

    user = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name=u'Пользователь', related_name='postlikes')
    post = models.ForeignKey('exploit.Post', verbose_name=u'Эксплоит', related_name='postlikes')
    value = models.BooleanField(verbose_name=u'Лайк')

    class Meta:
        verbose_name = u'Лайк'
        verbose_name_plural = u'Лайки'
        unique_together = ('user', 'post')


class Post(LikeMixin):
    def __unicode__(self):
        return 'Post: %20s' % self.title

    def get_absolute_url(self):
        from django.core.urlresolvers import reverse
        return reverse('exploit:post', args=[str(self.id)])

    PLATFORM_ANY = '--any--'
    PLATFORM_AIX = 'aix'
    PLATFORM_ANDROID = 'android'
    PLATFORM_ARM = 'arm'
    PLATFORM_ASHX = 'ashx'
    PLATFORM_ASP = 'asp'
    PLATFORM_ATHEOS = 'atheos'
    PLATFORM_BEOS = 'beos'
    PLATFORM_BSD = 'bsd'
    PLATFORM_BSDI_X86 = 'bsdi_x86'
    PLATFORM_BSD_PPC = 'bsd_ppc'
    PLATFORM_BSD_X86 = 'bsd_x86'
    PLATFORM_CFM = 'cfm'
    PLATFORM_CGI = 'cgi'
    PLATFORM_FREEBSD = 'freebsd'
    PLATFORM_FREEBSD_X86 = 'freebsd_x86'
    PLATFORM_FREEBSD_x86_64 = 'freebsd_x86-64'
    PLATFORM_GENERATOR = 'generator'
    PLATFORM_HARDWARE = 'hardware'
    PLATFORM_HP_UX = 'hp-ux'
    PLATFORM_IMMUNIX = 'immunix'
    PLATFORM_IOS = 'ios'
    PLATFORM_IRIX = 'irix'
    PLATFORM_JAVA = 'java'
    PLATFORM_JSON = 'json'
    PLATFORM_JSP = 'jsp'
    PLATFORM_LINUX = 'linux'
    PLATFORM_LINUX_MIPS = 'linux_mips'
    PLATFORM_LINUX_PPC = 'linux_ppc'
    PLATFORM_LINUX_SPARC = 'linux_sparc'
    PLATFORM_LINUX_AMD64 = 'lin_amd64'
    PLATFORM_LINUX_X86 = 'lin_x86'
    PLATFORM_LINUX_X86_64 = 'lin_x86-64'
    PLATFORM_MINIX = 'minix'
    PLATFORM_MIPS = 'mips'
    PLATFORM_MULTIPLE = 'multiple'
    PLATFORM_NETBSD_X86 = 'netbsd_x86'
    PLATFORM_NETWARE = 'netware'
    PLATFORM_NOVELL = 'novell'
    PLATFORM_OPENBSD = 'openbsd'
    PLATFORM_OPENBSD_X86 = 'openbsd_x86'
    PLATFORM_OSX = 'osx'
    PLATFORM_OSX_PPC = 'osx_ppc'
    PLATFORM_PALM_OS = 'palm_os'
    PLATFORM_PERL = 'perl'
    PLATFORM_PHP = 'php'
    PLATFORM_PLAN9 = 'plan9'
    PLATFORM_PYTHON = 'python'
    PLATFORM_QNX = 'qnx'
    PLATFORM_SCO = 'sco'
    PLATFORM_SCO_X86 = 'sco_x86'
    PLATFORM_SH4 = 'sh4'
    PLATFORM_SOLARIS = 'solaris'
    PLATFORM_SOLARIS_SPARC = 'solaris_sparc'
    PLATFORM_SOLARIS_X86 = 'solaris_x86'
    PLATFORM_SYSTEM_Z = 'system_z'
    PLATFORM_TRU64 = 'tru64'
    PLATFORM_ULTRIX = 'ultrix'
    PLATFORM_UNIX = 'unix'
    PLATFORM_UNIXWARE = 'unixware'
    PLATFORM_WIN32 = 'win32'
    PLATFORM_WIN64 = 'win64'
    PLATFORM_WINDOWS = 'windows'
    PLATFORM_XML = 'xml'
    PLATFORM_OTHER = '--other--'

    PLATFORM_CHOICES = (
        (PLATFORM_ANY, '--any--'),
        (PLATFORM_AIX, 'aix'),
        (PLATFORM_ANDROID, 'android'),
        (PLATFORM_ARM, 'arm'),
        (PLATFORM_ASHX, 'ashx'),
        (PLATFORM_ASP, 'asp'),
        (PLATFORM_ATHEOS, 'atheos'),
        (PLATFORM_BEOS, 'beos'),
        (PLATFORM_BSD, 'bsd'),
        (PLATFORM_BSDI_X86, 'bsdi_x86'),
        (PLATFORM_BSD_PPC, 'bsd_ppc'),
        (PLATFORM_BSD_X86, 'bsd_x86'),
        (PLATFORM_CFM, 'cfm'),
        (PLATFORM_CGI, 'cgi'),
        (PLATFORM_FREEBSD, 'freebsd'),
        (PLATFORM_FREEBSD_X86, 'freebsd_x86'),
        (PLATFORM_FREEBSD_x86_64, 'freebsd_x86-64'),
        (PLATFORM_GENERATOR, 'generator'),
        (PLATFORM_HARDWARE, 'hardware'),
        (PLATFORM_HP_UX, 'hp-ux'),
        (PLATFORM_IMMUNIX, 'immunix'),
        (PLATFORM_IOS, 'ios'),
        (PLATFORM_IRIX, 'irix'),
        (PLATFORM_JAVA, 'java'),
        (PLATFORM_JSON, 'json'),
        (PLATFORM_JSP, 'jsp'),
        (PLATFORM_LINUX, 'linux'),
        (PLATFORM_LINUX_MIPS, 'linux_mips'),
        (PLATFORM_LINUX_PPC, 'linux_ppc'),
        (PLATFORM_LINUX_SPARC, 'linux_sparc'),
        (PLATFORM_LINUX_AMD64, 'lin_amd64'),
        (PLATFORM_LINUX_X86, 'lin_x86'),
        (PLATFORM_LINUX_X86_64, 'lin_x86-64'),
        (PLATFORM_MINIX, 'minix'),
        (PLATFORM_MIPS, 'mips'),
        (PLATFORM_MULTIPLE, 'multiple'),
        (PLATFORM_NETBSD_X86, 'netbsd_x86'),
        (PLATFORM_NETWARE, 'netware'),
        (PLATFORM_NOVELL, 'novell'),
        (PLATFORM_OPENBSD, 'openbsd'),
        (PLATFORM_OPENBSD_X86, 'openbsd_x86'),
        (PLATFORM_OSX, 'osx'),
        (PLATFORM_OSX_PPC, 'osx_ppc'),
        (PLATFORM_PALM_OS, 'palm_os'),
        (PLATFORM_PERL, 'perl'),
        (PLATFORM_PHP, 'php'),
        (PLATFORM_PLAN9, 'plan9'),
        (PLATFORM_PYTHON, 'python'),
        (PLATFORM_QNX, 'qnx'),
        (PLATFORM_SCO, 'sco'),
        (PLATFORM_SCO_X86, 'sco_x86'),
        (PLATFORM_SH4, 'sh4'),
        (PLATFORM_SOLARIS, 'solaris'),
        (PLATFORM_SOLARIS_SPARC, 'solaris_sparc'),
        (PLATFORM_SOLARIS_X86, 'solaris_x86'),
        (PLATFORM_SYSTEM_Z, 'system_z'),
        (PLATFORM_TRU64, 'tru64'),
        (PLATFORM_ULTRIX, 'ultrix'),
        (PLATFORM_UNIX, 'unix'),
        (PLATFORM_UNIXWARE, 'unixware'),
        (PLATFORM_WIN32, 'win32'),
        (PLATFORM_WIN64, 'win64'),
        (PLATFORM_WINDOWS, 'windows'),
        (PLATFORM_XML, 'xml'),
        (PLATFORM_OTHER, '--other--'),
    )

    uuid = models.UUIDField(default=uuid.uuid4, editable=False, verbose_name=u'Уникальный идентификатор')
    title = models.CharField(max_length=255, verbose_name=u'Название')
    cve_id = models.CharField(max_length=10, blank=True, verbose_name=u'CVE-ID',
                              help_text=u'CVE-ID в формате YYYY-NNNN')
    published = models.DateTimeField(auto_now_add=True, verbose_name=u'Дата публикации')
    modified = models.DateTimeField(auto_now=True, verbose_name=u'Дата последнего изменения')
    code = models.TextField(verbose_name=u'Код эксплоита')
    description = models.TextField(blank=True, verbose_name=u'Описание')
    attachment_file = models.FileField(upload_to=post_upload_path, verbose_name=u'Файл эксплоита')
    exploit_type = models.ForeignKey('exploit.exploittype', verbose_name=u'Тип эксплоита',
                                     related_name='exploits')
    platform = models.CharField(max_length=15, choices=PLATFORM_CHOICES, verbose_name=u'Платформа')
    author = models.ForeignKey(settings.AUTH_USER_MODEL, verbose_name=u'Автор', related_name='posts')
    confirmed = models.BooleanField(default=False, verbose_name=u'Подтверждён')
    tags = models.ManyToManyField(Tag, related_name='exploits', blank=True, verbose_name=u'Тэги')

    class Meta:
        verbose_name = u'Эксплоит'
        verbose_name_plural = u'Эксплоиты'

    def get_cent_answers_channel_name(self):
        return "comments"
